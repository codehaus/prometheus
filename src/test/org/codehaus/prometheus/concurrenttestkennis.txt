Als je een methode hebt die calls doorgeeft, zoals bij veel van de LockUtil calls, kan je mock technieken gebruiken.

Dus wanneer ga je inhoudelijk testen? En wanneer ga je mocken?

Testen van spurious wakeups.

 http://www-128.ibm.com/developerworks/java/library/j-contest.html
 http://www.theserverside.com/tt/articles/content/TestingConcurrent/article.html
 http://www.superscalar.org/blog/
 http://www-128.ibm.com/developerworks/java/library/j-junit4.html?ca=dgr-lnxw01JUnit4

 junit extensions voor repeated tests

 De threads die worden gemaakt, kunnen de hoofd thread beinvloeden. Stel dat
 je een interrupt gaat schedulen, dan zou deze interrupt kunnen aankomen bij de
 volgende test die je uitvoert. Tests draaien dus niet volledig in isolatie.

 Vraag is dan: hoe kun je wel garanderen dat ze in isolatie draaien? Het hoofd
 probleem op dit moment is dat de unittest-mainthread wordt gebruikt, en dat
 je daar ook events op loopt af te sturen. Het is beter als je een nieuwe
 thread zou maken, en deze de gebruikt om de test methode op uit te voeren.


Bij de ThreadPoolRepeater de testen met Relaxed en met Strict uitvoeren.